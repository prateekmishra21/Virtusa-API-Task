{
  "version": 3,
  "sources": [
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "App",
    "React",
    "useState",
    "id",
    "title",
    "completed",
    "activateItem",
    "setActivateItem",
    "allTasks",
    "setAllTasks",
    "isEditing",
    "setIsEditing",
    "fetchTasks",
    "fetch",
    "then",
    "response",
    "json",
    "data",
    "useEffect",
    "className",
    "style",
    "fontSize",
    "onSubmit",
    "e",
    "preventDefault",
    "url",
    "method",
    "headers",
    "body",
    "JSON",
    "stringify",
    "catch",
    "error",
    "console",
    "log",
    "flex",
    "onChange",
    "target",
    "name",
    "value",
    "type",
    "placeholder",
    "map",
    "task",
    "index",
    "key",
    "onClick",
    "strikeUnstrike",
    "startEdit",
    "deleteItem",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister",
    "message"
  ],
  "mappings": "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",
  "file": "static/js/main.68136070.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\nimport \"./App.css\";\nconst App = () => {\n  const endPoint = \"http://165.232.176.214/api\";\n  const [activateItem, setActivateItem] = React.useState({\n    id: null,\n    title: \"\",\n    completed: false,\n  });\n  const [allTasks, setAllTasks] = React.useState([]);\n  const [isEditing, setIsEditing] = React.useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    var url = `${endPoint}/task-create/`;\n\n    if (isEditing == true) {\n      url = `http://165.232.176.214/api/task-update/${activateItem.id}/`;\n      setIsEditing(false);\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(activateItem),\n    })\n      .then((response) => {\n        fetchTasks();\n        setActivateItem({\n          id: null,\n          title: \"\",\n          completed: false,\n        });\n      })\n      .catch(function (error) {\n        console.log(\"ERROR:\", error);\n      });\n  };\n\n  const handleChange = (e) => {\n    var name = e.target.name;\n    var value = e.target.value;\n    setActivateItem({\n      ...activateItem,\n      title: value,\n    });\n  };\n\n  const fetchTasks = () => {\n    fetch(\"http://165.232.176.214/api/task-list/\")\n      .then((response) => response.json())\n      .then((data) => setAllTasks(data));\n  };\n\n  const startEdit = (task) => {\n    setActivateItem(task);\n    setIsEditing(true);\n  };\n\n  const deleteItem = (task) => {\n    fetch(`http://165.232.176.214/api/task-delete/${task.id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    }).then((response) => {\n      fetchTasks();\n    });\n  };\n\n  const strikeUnstrike = (task) => {\n    task.completed = !task.completed;\n    var url = `http://165.232.176.214/api/task-update/${task.id}/`;\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ completed: task.completed, title: task.title }),\n    }).then(() => {\n      fetchTasks();\n    });\n  };\n\n  React.useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div id=\"task-container\">\n        <div id=\"form-wrapper\">\n          <center>\n            <p style={{ fontSize: \"20px\" }}>Prateek's Taks Management</p>\n          </center>\n          <form onSubmit={handleSubmit} id=\"form\">\n            <div className=\"flex-wrapper\">\n              <div style={{ flex: 6 }}>\n                <input\n                  className=\"form-control\"\n                  onChange={handleChange}\n                  value={activateItem.title}\n                  id=\"title\"\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Add task..\"\n                />\n              </div>\n\n              <div style={{ flex: 1 }}>\n                <input\n                  id=\"submit\"\n                  className=\"btn btn-warning\"\n                  type=\"submit\"\n                  name=\"Add\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div id=\"list-wrapper\">\n          {allTasks.map(function (task, index) {\n            return (\n              <div key={index} className=\"task-wrapper flex-wrapper\">\n                <div onClick={() => strikeUnstrike(task)} style={{ flex: 7 }}>\n                  {task.completed == false ? (\n                    <span>{task.title}</span>\n                  ) : (\n                    <strike>{task.title}</strike>\n                  )}\n                </div>\n\n                <div style={{ flex: 1 }}>\n                  <button\n                    onClick={() => startEdit(task)}\n                    className=\"btn btn-sm btn-outline-info\"\n                  >\n                    Edit\n                  </button>\n                </div>\n\n                <div style={{ flex: 1 }}>\n                  <button\n                    onClick={() => deleteItem(task)}\n                    className=\"btn btn-sm btn-outline-dark delete\"\n                  >\n                    -\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
